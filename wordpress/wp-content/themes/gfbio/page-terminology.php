<?php
/**
 * The template for displaying pages
 *
 * -*- coding: utf-8 -*-
 * vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
 *
 */

get_header(); ?>

<?php
while ( have_posts() ) : the_post();

// the_content();

endwhile;

$loader_html = '
              <div class="preloader-wrapper active" title="Loading...">
                <div class="spinner-layer spinner-red-only">
                  <div class="circle-clipper left">
                    <div class="circle"></div>
                  </div><div class="gap-patch">
                    <div class="circle"></div>
                  </div><div class="circle-clipper right">
                    <div class="circle"></div>
                  </div>
                </div>
              </div>
';

?>

<section id="terminology">

<div class="container">
<div class="row">



<h1 class="terminology-title flow-text center-align"><?php _e('Loading', 'gfbio') ?>...</h1>


<div id="term-details">
    <div class="left-side col s12"> <!-- m6 -->
        <div class="api_result">
            <h5 class="flow-text"><?php _e('General Information', 'gfbio') ?></h5>
            <div class="general">
                <?php echo $loader_html ?>
            </div>
        </div>
        <div class="api_result">
            <h5 class="flow-text"><?php _e('Ontology Annotations', 'gfbio') ?></h5>
            <div class="metadata">
                <?php echo $loader_html ?>
            </div>
        </div>
        <div class="api_result">
            <h5 class="flow-text"><?php _e('Metrics', 'gfbio') ?></h5>
            <div class="metrics">
                <?php echo $loader_html ?>
            </div>
        </div>
    </div>
    <!--
    <div class="right-side center-align col s12 m6">
    	<p>
        	[[[ This side should be filled with Robert's Widget. ]]]

          <div class="preloader-wrapper active" title="<?php _e('Loading...', 'gfbio') ?>">
            <div class="spinner-layer spinner-red-only">
              <div class="circle-clipper left">
                <div class="circle"></div>
              </div><div class="gap-patch">
                <div class="circle"></div>
              </div><div class="circle-clipper right">
                <div class="circle"></div>
              </div>
            </div>
          </div>
 
    	</p>
    </div>
    -->
</div>

</div><!--row-->
</div><!--container-->

</section>

<?php get_footer() ?>


<script type="text/javascript">
$(function() {

    // see http://stackoverflow.com/a/1026087/426266
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    var id = '<?php echo htmlentities($_GET['ontology'], ENT_QUOTES) ?>',
        base = 'http://terminologies.gfbio.org/api/terminologies/';

    var transformation = {
        general: [
            {'acronym': 'Acronym'},
            {'description': 'Description'},
            {'URI': 'URI'},
            {'releaseDate': 'Release date'},
            {'creationDate': 'Creation date'},
            {'hasOntologyLanguage': 'Ontology language'},
            {'hasFormalityLevel': 'Formality level'},
            {'hasDomain': 'Domain'}
        ],
        annotations: [
            {'versionIRI': 'Version IRI'},
            {'date': 'Date'},
            {'date created': 'Date created'},
            {'last updated': 'Last updated'},
            {'Date Issued': 'Date issued'},
            {'licence': 'License'},
            {'License': 'License'},
            {'license': 'License'},
            {'http://purl.org/dc/terms/licence': 'License'},
            {'owned by': 'Owned by'},
            {'has license type': 'License type'},
            {'author': 'Author'},
            {'creator': 'Creator'},
            {'contributor': 'Contributor'},
            {'Contributor': 'Contributor'},
            {'Bibliographic Citation': 'Bibliographic citation'},
            {'comment': 'Comment'},
            {'label': 'Label'},
            {'type': 'Type'},
            {'auto-generated-by': 'Auto-generated by'},
            {'has graph role': 'Graph Role'},
            {'has_obo_format_version': 'OBO format version'},
            {'default-namespace': 'Default namespace'}
        ],
        metrics: [
            {'numClasses': 'Number of classes'},
            {'numIndividuals': 'Number of individuals'},
            {'numProperties': 'Number of properties'},
            {'classesWithoutDefinition': 'Classes without definition'},
            {'classesWithoutLabel': 'Classes without label'},
            {'averageNumberOfChildren': 'Average number of children'},
            {'classesWithASingleChild': 'Classes with a single child'},
            {'maximumNumberOfChildren': 'Maximum number of children'},
            {'classesWithMoreThan25Children': 'Classes with more than 25 children'},
            {'classesWithMoreThan1Parent': 'Classes with more than 1 parent'},
            {'maximumDepth': 'Maximum depth'},
            {'numberOfLeaves': 'Number of leaves'}
        ]
    };


    var filters = function filters (key, val) {
        var ret = val;
        switch (key) {
        case 'hasOntologyLanguage':
        case 'hasFormalityLevel':
        case 'hasDomain':
            if (typeof val === 'string') {
                ret = val.substr(val.indexOf('#') + 1);
            }
            break;
        case 'URI':
        case 'versionIRI':
            ret = '<a href="' + val + '" target="_blank">' + val + '</a>';
            break;
        case 'type':
            if (typeof val === 'string') {
                ret = val.substr(val.indexOf('#') + 1);
            }
            break;
        }
        return ret;
    };// filters

    var load_details = function load_details (url, klass, section) {

        /* Query the general info of the terminology */
        $.ajax({
            url: url,
            dataType: 'json',
            success: function(data) {
                var ontology,
                    tpl = '',
                    key,
                    val,
                    output;
                if (!data || data.results === undefined || data.results[0] === undefined) {
                    // $(klass).parents('.api_result').remove();
                    return; // abort
                }
                ontology = data.results[0];
                if (ontology.name !== undefined) {
                    $('.terminology-title').text(ontology.name);
                    delete ontology.name;
                }
                console.log(ontology);
                // fill the page with the contents
                // $.each(ontology, function (key, item) {
                $.each(transformation[section], function (key, item) {
                    for(var key in item){
                        if (ontology[key] === undefined || ontology[key] === '') {
                            return true; // continue
                        }
                        output = filters(key, ontology[key]);
                        tpl += '<li><span class="key">' + item[key] + '</span>: ' + output + '</li>';
                    }// for
                });// $.each
                tpl = '<ul>'+tpl+'</ul>';
                $('#term-details .left-side ' + klass).html(tpl);
            },
            error: function(data, textStatus, errorThrown) {
                // console.error(capitalizeFirstLetter(textStatus), ':', errorThrown);
            },
            complete: function (jqXHR, status) {
                // remove the loader
                $(klass).children('.preloader-wrapper').remove();
                // if no results were loaded, remove the div
                if ($(klass).children().length === 0) {
                    $(klass).parents('.api_result').remove();
                }
            }
        });// $.ajax

    };// load_details

    function load_ontology(base, klass, key) {
        try {
            load_details(base, klass, key);
        } catch (err) {
            console.error(err + ' missing');
            $('.'+section).remove();
        }
    }// load_ontology

    var onts = [
        {base: base + id, klass: '.general', key: 'general'},
        {base: base + id + '/metadata', klass: '.metadata', key: 'annotations'},
        {base: base + id + '/metrics', klass: '.metrics', key: 'metrics'}
    ];

    onts.forEach(function(item) {
        load_ontology(item.base, item.klass, item.key);
    });

});
</script>

</body>
</html>